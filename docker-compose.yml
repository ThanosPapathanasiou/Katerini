version: '3.8'
services:

  website:
    image: katerini.website:latest
    container_name: website
    ports: 
      - "15000:8080"
    environment:
      - DOTNET_ENVIRONMENT=Docker # just to make it easy to differentiate in the logs when running locally vs in docker
      - ConnectionStrings__RabbitMq=amqp://rabbitmq:5672
      - ConnectionStrings__SqlDatabase=Server=mssql;Database=Katerini;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True
      - SeqLogging.Configuration__ServerUrl=http://seq:5341
    restart: on-failure
    depends_on:
      mssql:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/live"]
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 3

  service:
    image: katerini.service:latest
    container_name: service
    environment:
      - DOTNET_ENVIRONMENT=Docker # just to make it easy to differentiate in the logs when running locally vs in docker
      - ConnectionStrings__RabbitMq=amqp://rabbitmq:5672
      - ConnectionStrings__SqlDatabase=Server=mssql;Database=Katerini;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True
      - SeqLogging.Configuration__ServerUrl=http://seq:5341
    restart: on-failure
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  mssql:
    image: mcr.microsoft.com/mssql/server
    container_name: mssql
    user: root
    environment:
      - ACCEPT_EULA=Y
      - SA_USERNAME=sa
      - SA_PASSWORD=YourStrong!Passw0rd
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql/data
      - mssql_log:/var/opt/mssql/log
    healthcheck:
      test: [ "CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "YourStrong!Passw0rd", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq/
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5

  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "15673:80"
    volumes:
      - seq_data:/data
    # TODO: install Seq.Input.HealthCheck package to Seq and configure it to visualize the health checks for the other applications

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "15674:8081"

  nginx:
    image: nginx:latest
    container_name: nginx_reverse_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: on-failure
    depends_on:
      website:
        condition: service_healthy

volumes:
  mssql_data:
  mssql_log:
  redis_data:
  seq_data:
  rabbitmq_data:
  rabbitmq_logs: